import QtQuick 1.1

$$QML_IMPORT_QTCOMPONENTS

import \"unicomponents\"


UniDialog {
    id: dialog

    titleText: qsTr(\"Select Book\")

    property alias bookModel: bookList.model




    function open(place) {
        contentItem.state = \"bookSelection\"
        if (status == DialogStatus.Closed)
            status = DialogStatus.Opening

        bookList.currentIndex = bookModel.bookCodes().indexOf(placeAccesser.bookCode(place))
        bookList.positionViewAtIndex(bookList.currentIndex, ListView.Center)

        chaptersList.currentIndex = placeAccesser.chapterNo(place) - 1
        chaptersList.positionViewAtIndex(chaptersList.currentIndex, ListView.Contain)
    }


    function place() {
        var bookCode = \"xxx\"
        if (bookList.currentIndex != -1)
            bookCode = bookModel.bookCodeAt(bookList.currentIndex)

        if (versesList.currentIndex == 0)
            return placeAccesser.placeNoVerses(
                bookCode,
                chaptersList.currentIndex + 1
            )
        else
            return placeAccesser.placeOneVerse(
                bookCode,
                chaptersList.currentIndex + 1,
                versesList.currentIndex + 1
            )
    }

    content: Item {
        id: contentItem
        width: parent.width

        anchors.horizontalCenter: parent.horizontalCenter

        height: dialog.parent.height * 0.8

        clip: true

        ListView {
            id: bookList

            anchors.top: parent.top
            anchors.bottom: parent.bottom

            width: parent.width

            clip: true

            model: settings.translation

            cacheBuffer: 70

            delegate: SimpleListDelegate {
                selectable: true

                rtl: settings.translation.rtl

                onClicked: {
                    contentItem.state = \"chapterSelection\"
                }
            }


            onCurrentIndexChanged: {
                var bookCode = bookList.model.bookCodeAt(currentIndex)

                chaptersModel.clear()

                if (bookCode != \"\")
                {
                    var chaptersCount = bookList.model.chaptersInBook(bookCode)
                    for (var i = 1; i <= chaptersCount; i++)
                        chaptersModel.append({ value: i })
                }
            }
        }
        ScrollDecorator { flickableItem: bookList }


        Item {
            id: secondPage

            anchors.left: bookList.right
            width: parent.width
            height: parent.height


            anchors.bottom: parent.bottom



            Item {
                id: chapterLabel

                height: 30

                anchors.left: parent.left
                anchors.right: parent.horizontalCenter

                Label {
                    id: _chapterLabel

                    anchors.horizontalCenter: parent.horizontalCenter
                    anchors.verticalCenter: parent.verticalCenter

                    text: qsTr(\"Chapter:\")
                    color: \"white\"
                }
            }
            Item {
                id: verseLabel

                height: chapterLabel.height

                anchors.left: parent.horizontalCenter
                anchors.right: parent.right

                Label {
                    id: _verseLabel

                    anchors.horizontalCenter: parent.horizontalCenter
                    anchors.verticalCenter: parent.verticalCenter

                    text: qsTr(\"Verse:\")
                    color: \"white\"
                }
            }


            ListView {
                id: chaptersList

                anchors.left: parent.left
                anchors.right: parent.horizontalCenter
                anchors.top: chapterLabel.bottom
                anchors.bottom: spacer.top

                model: ListModel {
                    id: chaptersModel
                }

                clip: true
                cacheBuffer: 70

                delegate: SimpleListDelegate {
                    centered: true
                    selectable: true
                }

                onCurrentIndexChanged: {
                    versesModel.clear()
                    if (currentIndex == -1)
                        return

                    var versesCount = bookList.model.versesInChapter(
                        bookList.model.bookCodeAt(bookList.currentIndex),
                        currentIndex + 1
                    )
                    for (var i = 1; i <= versesCount; i++)
                        versesModel.append({ value: i })
                }
            }
            ScrollDecorator { flickableItem: chaptersList }

            ListView {
                id: versesList

                anchors.left: parent.horizontalCenter
                anchors.right: parent.right
                anchors.top: verseLabel.bottom
                anchors.bottom: spacer.top

                model: ListModel {
                    id: versesModel
                }

                clip: true
                cacheBuffer: 70

                delegate: SimpleListDelegate {
                    centered: true
                    selectable: true
                }
            }
            ScrollDecorator { flickableItem: versesList }


            Rectangle {
                id: spacer

                height: 10

                visible: false

                anchors.left: parent.left
                anchors.right: parent.right
                anchors.bottom: backButton.top
            }


            UniDialogButton {
                id: backButton

                anchors.left: parent.left
                width: parent.width / 4
                anchors.bottom: parent.bottom

                text: \"←\"

                onClicked: contentItem.state = \"bookSelection\"
            }

            UniDialogButton {
                id: acceptButton

                anchors.left: backButton.right
                anchors.leftMargin: 20
                anchors.right: parent.right
                anchors.bottom: parent.bottom

                text: qsTr(\"OK\")

                onClicked: dialog.accept()
            }
        }


        state: \"bookSelection\"

        states: [
            State {
                name: \"bookSelection\"

                AnchorChanges {
                    target: bookList
                    anchors.left: contentItem.left
                }
            },
            State {
                name: \"chapterSelection\"

                AnchorChanges {
                    target: bookList
                    anchors.right: contentItem.left
                }
            }
        ]

        transitions: Transition {
            AnchorAnimation { duration: 200 }
        }
    }

    buttons: Item { }
}
